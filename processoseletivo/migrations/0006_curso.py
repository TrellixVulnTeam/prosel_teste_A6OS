# -*- coding: utf-8 -*-
# Generated by Django 1.9.11 on 2017-01-17 14:25
from __future__ import unicode_literals

from django.db import migrations, models
from django.db.models import F
from django.db.models.functions import Lower

from base.choices import Turno
from cursos.choices import Formacao


msg = """
--------------------------------------------------------
| CURSOS  |
| NOME    |{c1.nome}|{c2.curso.nome}
| CAMPUS  |{c1.campus.nome}|{c2.campus.nome}
| FORMAÇÃO|{c1.formacao.nome}|{c2.formacao}
| TURNO   |{c1.turno.nome}|{c2.turno}
---------------------------------------------------------
"""


def update_codigo(model, codes):
    for old_code, new_code in codes:
        qs = model.objects.filter(codigo=old_code)
        if qs.count() == 1:
            qs.update(codigo=new_code)
        elif qs.count() > 1:
            raise ValueError(f"code error={old_code}")


def adicionar_curso(apps, schema_editor):
    chamada_class = apps.get_model("processoseletivo", "chamada")
    vaga_class = apps.get_model("processoseletivo", "inscricao")
    inscricao_class = apps.get_model("processoseletivo", "vaga")
    cursops_class = apps.get_model("processoseletivo", "curso")
    curso_class = apps.get_model("cursos", "cursonocampus")

    # apaga entidades sem uso
    quantidade, entidades = (
        cursops_class.objects.exclude(
            formacao__nome__in=["Técnico Integrado", "Técnico Subsequente"]
        )
        .distinct()
        .delete()
    )

    if quantidade:
        entidades.pop("processoseletivo.Curso")
        if len(entidades):
            raise ValueError("Existem dados que serão apagados")

    # corrige o turno do curso adm-jp
    curso_class.objects.filter(id=40).update(turno="INTEGRAL")

    # corrige o código dos cursos

    update_codigo(
        curso_class,
        [
            (22222, 114944),
            (1111, 1128096),
            (1002600, 100260),
            (1262262, 1261262),
            (33, 1341255),
            (1111111111, 1166614),
            (2222, 123114),
            (3, 123105),
            (44444, 95101),
            (33333333, 123116),
        ],
    )

    # migra cursos do psct
    turno_map = dict(t[::-1] for t in Turno.choices())
    formacao_map = dict(f[::-1] for f in Formacao.choices())
    curso_map = {}

    print()

    for c in cursops_class.objects.all():
        print()
        curso = (
            curso_class.objects.annotate(cnome=Lower(F("campus__nome")))
            .filter(
                curso__nome=c.nome,
                cnome=c.campus.nome[len("CAMPUS ") :].lower(),
                turno=turno_map[c.turno.nome],
                formacao=formacao_map[c.formacao.nome],
            )
            .first()
        )

        texto = msg.format(c1=c, c2=curso)
        print(texto)
        curso_map[c] = curso

    for model in [chamada_class, vaga_class, inscricao_class]:
        for obj in model.objects.all():
            obj.curso2 = curso_map[obj.curso]
            obj.save()


def remover_curso(apps, schema_editor):
    chamada_class = apps.get_model("processoseletivo", "chamada")
    vaga_class = apps.get_model("processoseletivo", "inscricao")
    inscricao_class = apps.get_model("processoseletivo", "vaga")

    for model in [chamada_class, vaga_class, inscricao_class]:
        model.objects.all().update(curso2=None)


def update_numero_etapa(apps, schema_editor):
    etapa_class = apps.get_model("processoseletivo", "etapa")
    etapa_class.objects.filter(id__in=[1, 2]).update(numero=0)


def reverte_numero_etapa(apps, schema_editor):
    etapa_class = apps.get_model("processoseletivo", "etapa")
    etapa_class.objects.filter(id__in=[1, 2]).update(numero=1)


def fix_desempenhos(apps, schema_editor):
    # Duplica desempenhos

    inscricao_class = apps.get_model("processoseletivo", "inscricao")

    qs = inscricao_class.objects.filter(desempenho__isnull=True)
    for inscricao in qs:
        outra = (
            inscricao_class.objects.filter(
                candidato=inscricao.candidato,
                curso=inscricao.curso,
                edicao=inscricao.edicao,
            )
            .exclude(id=inscricao.id)
            .first()
        )
        desempenho = outra.desempenho
        desempenho.pk = None
        desempenho.inscricao = inscricao
        desempenho.save(force_insert=True)


class Migration(migrations.Migration):

    dependencies = [
        ("processoseletivo", "0005_auto_20170109_1054"),
    ]

    operations = [
        migrations.RunPython(fix_desempenhos),
        migrations.AddField(
            model_name="etapa",
            name="campus",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.deletion.CASCADE,
                to="cursos.Campus",
                verbose_name="Campus",
            ),
        ),
        migrations.RunPython(update_numero_etapa, reverte_numero_etapa),
        migrations.AlterUniqueTogether(
            name="etapa", unique_together=set([("edicao", "numero", "campus")]),
        ),
        migrations.AddField(
            model_name="chamada",
            name="curso2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.deletion.CASCADE,
                to="cursos.CursoNoCampus",
            ),
        ),
        migrations.AddField(
            model_name="inscricao",
            name="curso2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.deletion.CASCADE,
                related_name="inscricoes_mec",
                to="cursos.CursoNoCampus",
            ),
        ),
        migrations.AddField(
            model_name="vaga",
            name="curso2",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.deletion.CASCADE,
                to="cursos.CursoNoCampus",
            ),
        ),
        migrations.RunPython(adicionar_curso, remover_curso),
    ]
